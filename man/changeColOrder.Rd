% Generated by roxygen2 (4.0.2): do not edit by hand
\name{changeColOrder}
\alias{changeColOrder}
\title{changeColOrder()}
\usage{
changeColOrder(data, ..., ref = TRUE, warnings = TRUE)
}
\arguments{
\item{data}{a data.frame or data.table}

\item{...}{either a) if you are only changing one column, the current column
name, followed by a comma and then the desired column name (option of NSE),
or b) one or more of the following: current_column_name/desired_column_name,
where the current column name is followed by a forward slash followed by
your desired column name. Using the function in this way, you may change
as many column names as you like in one function call.}

\item{ref}{TRUE (default) or FALSE, if TRUE and data is a data.table, modify
the data.table by reference (modifying-in-place), if FALSE, do not modify
the data.table by reference, instead treat it like a data.frame (copy on
modify). When combining this function with the magrittr package, use the
\code{\%T>\%} operator before this function to modify-in-place.}

\item{warnings}{TRUE (default) or FALSE, should warnings occur when
modifications by reference occur or conversions take place?}
}
\description{
Changes a column name from one to another. Accepts both data frames and
data.tables.
}
\details{
Note that this function has side effects, namely, it modifies
an object in its calling environment. This was necessary for data.tables, as
the goal is to modify them in place. I decided to do the same for data
frames to make the function syntax the same, even though R won't do
modification in place for data frames.
}
\examples{
Here is how to change a column name, where we change a column named "Jake"
into one named "Josh":

changeColOrder(my_data, "Jake", "Josh")
}
\keyword{crosswalk}
\keyword{lookup,}
\keyword{match,}
\keyword{matchup,}
\keyword{up,}

